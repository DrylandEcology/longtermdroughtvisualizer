---
AWSTemplateFormatVersion: '2010-09-09'
Description: USGS CHS CloudFormation
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "EC2 Configuration"
        Parameters:
          - OperatingSystem
          - InstanceType
          - TagKeyName
          - TagValue
          - Role
          - VolumeSize
      -
        Label:
          default: "Bootstrapping Configuration"
        Parameters:
          - AnsiblePullVersion
          - InstallIEM
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - Subnet
          - SecurityGroup
    ParameterLabels:
      OperatingSystem:
        default: "Operating System"
      InstanceType:
        default: "Instance Type"
      AnsiblePullVersion:
        default: "Ansible-Pull Version"
      InstallIEM:
        default: "Install IEM"
      TagKeyName:
        default: "Tag Key"
      TagValue:
        default: "Tag Value"
      VolumeSize:
        default: "Volume Size"
      SecurityGroup:
        default: "Security Group(s)"
Parameters:
  Role:
    Type: String
    Default: csr-Ec2-Role-LP
    Description: Enter the role name (instance profile) to apply to the ec2 instance. Leave blank for no role.
  Subnet:
    Description: The subnet to launch the instance in to. It must be part of the VPC chosen above.
    Type: AWS::EC2::Subnet::Id
  SecurityGroup:
    Description: List of AWS Security Groups. Select one or many.
    Type: List<AWS::EC2::SecurityGroup::Id>
  OperatingSystem:
    Description: Operating System Desired - AWSLinux2 and Ubuntu only supported on or above branch V3
    Type: String
    Default: AWSLinux2
    AllowedValues:
    - AWSLinux
    - AWSLinux2
    - RHEL.7.5
    - RHEL.7.6.Beta
    - CentOS.7.5
    - Ubuntu14
    - Ubuntu16
    - Ubuntu17
    - Ubuntu18
  AnsiblePullVersion:
   Description: Version of Ansible-Pull to bootstrap with
   Type: String
   Default: latest
   AllowedValues:
   - latest
   - master
   - v2
   - v3
  InstanceType:
    Description: Desired Instance Size
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m3.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - x1e.xlarge
    - x1e.2xlarge
    - x1e.4xlarge
    - x1e.8xlarge
    - x1e.16xlarge
    - x1e.32xlarge
    - x1.32xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
  InstallIEM:
    Description: Install IEM on non-ephemeral instances (to run for >14 days).
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  TagKeyName:
    Description: 'Required: Enter the name of the key for the key-value. You''ll enter the actual value of the tag next.'
    Type: String
    Default: "Name"
    MinLength: 1
  TagValue:
    Description: 'Required: Enter the tag you''d like applied to the instance.'
    Type: String
    MinLength: 1
  VolumeSize:
    Description: Enter the number of GBs you want your volume to be. The minimum value
      is 8 GBs
    Type: Number
    Default: 100
    MinValue: 8
Mappings:
  OS:
    AWSLinux:
      amiID: ami-01e24be29428c15b2
      rootBlock: "/dev/xvda" # This is an HVM AMI
    AWSLinux2:
      amiID: ami-01bbe152bf19d0289
      rootBlock: "/dev/xvda" # This is an HVM AMI
    RHEL.7.5:
      amiID: ami-096510cab1b6b2c6d
      rootBlock: "/dev/sda1"
    RHEL.7.6.Beta:
      amiID: ami-036affea69a1101c9
      rootBlock: "/dev/sda1"
    CentOS.7.5:
      amiID: ami-01ed306a12b7d1c96
      rootBlock: "/dev/sda1"
    Ubuntu14:
      amiID: ami-0ea790e761025f9ce
      rootBlock: "/dev/xvda" # This is an HVM AMI
    Ubuntu16:
      amiID: ami-076e276d85f524150
      rootBlock: "/dev/xvda"
    Ubuntu17:
      amiID: ami-70873908
      rootBlock: "/dev/xvda"
    Ubuntu18:
      amiID: ami-0bbe6b35405ecebdb
      rootBlock: "/dev/sda1"
Conditions:
  HasRole: !Not [ !Equals ["", !Ref Role ] ]
Resources:
  LinuxEc2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ OS, !Ref OperatingSystem, amiID ]
      InstanceType: !Ref InstanceType
      Monitoring: 'true'
      IamInstanceProfile: !If [HasRole, !Ref Role, !Ref "AWS::NoValue"]
      SourceDestCheck: 'true'
      SubnetId: !Ref Subnet
      SecurityGroupIds: !Ref SecurityGroup
      BlockDeviceMappings:
      - DeviceName: !FindInMap [ OS, !Ref OperatingSystem, rootBlock ]
        Ebs:
          VolumeSize: !Ref VolumeSize
      Tags:
      - Key: !Ref TagKeyName
        Value: !Ref TagValue
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          if ! grep -q Ubuntu /etc/os-release; then setenforce permissive; fi
          if grep -q " 6" /etc/centos-release; then yum update curl -y; fi;
          cd /root/

          # log
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          # --------------------------------------------------------------------
          # setup

          echo BEGIN
          date '+%Y-%m-%d %H:%M:%S'

          whoami
          pwd

          # update
          yum update -y

          # make local directories and change ownership
          cd /usr/local

          sudo mkdir app
          cd app

          #https://stackoverflow.com/questions/27611608/ec2-user-permissions
          groupadd docker
          useradd shiny
          usermod -aG docker ec2-user
          usermod -aG docker ssm-user
          usermod -aG docker shiny

          #usermod -a -G appallow shiny or what ever permission needed by docker, etc.
          chown -R root:docker /usr/local/app # change ownership
          chmod -R g+rwx /usr/local/app # add read/write
          find /usr/local/app -type d -exec sudo chmod 2775 {} +
          find /usr/local/app -type f -exec sudo chmod 0664 {} +

          mkdir LTDV
          cd LTDV

          # --------------------------------------------------------------------
          # Clone necessary packages and files from github
          # --------------------------------------------------------------------

          # Get github
          yum install -y git

          mkdir Packages

          # clone  rSOILWAT2
          git clone -b reorganize_rSW2 --single-branch --recursive https://github.com/DrylandEcology/rSOILWAT2.git Packages/rSOILWAT2

          # clone ‘rSW2utils’
          cd Packages
          wget --no-check-certificate https://github.com/DrylandEcology/rSW2utils/archive/master.tar.gz
          mv master.tar.gz rSW2utils.tar.gz

          # clone ‘rSW2data’
          wget --no-check-certificate https://github.com/DrylandEcology/rSW2Data/archive/master.tar.gz
          mv master.tar.gz rSW2Data.tar.gz

          # clone ‘rSW2st’
          wget --no-check-certificate https://github.com/DrylandEcology/rSW2st/archive/master.tar.gz
          mv master.tar.gz rSW2st.tar.gz

          # clone ‘rSW2exter’
          wget --no-check-certificate https://github.com/DrylandEcology/rSW2exter/archive/master.tar.gz
          mv master.tar.gz rSW2exter.tar.gz

          #plotly
          git clone 'https://github.com/ropensci/plotly'

          # html widgets (for plotly)
          git clone 'https://github.com/ramnathv/htmlwidgets'

          # clone  App Code
          cd ../
          git clone -b version2_integrateMACA --single-branch https://code.chs.usgs.gov/sbsc/longtermdroughtsimulator longtermdroughtsimulator

          # mv dockerfile above short term app files
          mv longtermdroughtsimulator/dockerfile .   # Create docker file https://o2r.info/containerit/articles/basic.html
          mv longtermdroughtsimulator/ShinyApp ./shiny-app
          #mv longtermdroughtsimulator/docker-compose.yml ../
          #mv longtermdroughtsimulator/nginx.conf ../

          # --------------------------------------------------------------------
          # Download data from external soruces  -------------------
          # --------------------------------------------------------------------
          cd ../
          mkdir Data
          cd Data
          mkdir WeatherData
          cd WeatherData
          wget -r -l1 -np "https://www.northwestknowledge.net/metdata/data" -P . -A "tmmn_*.nc"
          wget -r -l1 -np "https://www.northwestknowledge.net/metdata/data" -P . -A "tmmx_*.nc"
          wget -r -l1 -np "https://www.northwestknowledge.net/metdata/data" -P . -A "pr_*.nc"

          cd ../../LTDV
         
          # --------------------------------------------------------------------
          # Docker !
          # --------------------------------------------------------------------
          # install Docker https://docs.docker.com/engine/install/ubuntu/#installation-methods
          ## or  https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html
          amazon-linux-extras install docker
          service docker start

          #install docker-compose - https://docs.docker.com/compose/install/
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          # --------------------------------------------------------------------
          # Get Docker set up for app
          # --------------------------------------------------------------------
          # https://hub.docker.com/r/rocker/shiny
          # https://pspdfkit.com/blog/2018/how-to-use-docker-compose-to-run-multiple-instances-of-a-service-in-development/
          #docker pull openanalytics/r-shiny
          docker pull rocker/shiny-verse

          # build
          docker build -t ltdv .

          # test interactively
          # # docker run -it --rm --entrypoint /bin/bash ltdv
          #https://github.com/rocker-org/shiny/issues/86
          #https://support.rstudio.com/hc/en-us/articles/219044787-Root-requirements-for-Shiny-Server

          # run
          docker run -itd \
             -p 3838:3838 \
             -v /srv/shinylog/:/var/log/shiny-server/ \
             -v /usr/local/app/Data/:/srv/shiny-server/ltdv/Data/ \
             ltdv

          cd ../
          docker-compose up --scale stdf=4 -d
          # copy awslog conf file, get latest awslog agents, enable cloud watch agents, setup to start on boot
          #cp /srv/shiny-server/shorttermdroughtforecaster/awslogs.conf /etc/awslogs/awslogs.conf
          #apt-get install -y awslogs
          #systemctl start awslogsd
          #systemctl enable awslogsd.service

          yum install amazon-cloudwatch-agent


        #  echo END
        #  date '+%Y-%m-%d %H:%M:%S'
Outputs:
  LinuxEc2InstanceId:
    Description: Resource ID of the newly created EC2 instance
    Value: !Ref LinuxEc2
